{"meta":{"title":"Don't BB,show me the code!","subtitle":null,"description":null,"author":"Nicolas","url":"http://NicolasGui.github.io"},"pages":[{"title":"About","date":"2017-11-29T16:23:26.000Z","updated":"2017-12-02T02:06:14.000Z","comments":false,"path":"About/index.html","permalink":"http://NicolasGui.github.io/About/index.html","excerpt":"","text":"About@timeline{ 2017@item{ 11月6日第一行第二行 / ok / } @item{ 12月7日第一行第二行 / ok / } } @timeline{ 2017@item{ 11月6日第一行第二行 / ok / } @item{ 12月7日第一行第二行 / ok / } }"},{"title":"😓 😓 似乎迷路了....","date":"2017-11-29T13:44:19.000Z","updated":"2017-11-29T14:08:31.000Z","comments":true,"path":"tags/index.html","permalink":"http://NicolasGui.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"web前端面试题之vue","slug":"web前端面试题之vue","date":"2017-12-18T07:02:29.000Z","updated":"2017-12-18T09:48:39.622Z","comments":true,"path":"2017/12/18/web前端面试题之vue/","link":"","permalink":"http://NicolasGui.github.io/2017/12/18/web前端面试题之vue/","excerpt":"","text":"请说下具体使用vue的理解？答： 1、使用vue不必担心布局更改和类名重复导致的js重写，因为它是靠数据驱动双向绑定，底层是通过Object.defineProperty() 定义的数据 set、get 函数原理实现。 2、组件化开发，让项目的可拓展性、移植性更好，代码重用性更高，就好像农民工建房子，拿起自己的工具包就可以开工。项目经理坐等收楼就好。 3、单页应用的体验零距离接触安卓原生应用，局部组件更新界面，让用户体验更快速省时。 4、js的代码无形的规范，团队合作开发代码可阅读性更高 你觉得哪些项目适合vue框架？答： 1、数据信息量比较多的，反之类似企业网站就无需此框架了。 2、手机web和app应用多端共用一套界面的项目，因为使用vue.cli+webpack后的前端目录，非常有利于项目的跨平台部署。 怎么理解MVVM模式的这些框架？答： 1、M就是Model模型层，存的一个数据对象。 2、V就是View视图层，所有的html节点在这一层。 3、VM就是ViewModel，它通过data属性连接Model模型层，通过el属性连接View视图层。 PC端项目你会在哪些场景使用Vue框架？答：上万级数据需要瀑布流更新和搜索的时候，因为数据庞大的时候，用原生的dom操作js和html都会有列表的html布局，迭代很困难。再一个dom节点的大面积添加会影响性能。 那么vue为什么解决这些问题呢？ 第一：只需用v-for在view层一个地方遍历数据即可，无需复制一段html代码在js和html两个地方。 第二：vue通过Virtual Dom就是在js中模拟DOM对象树来优化DOM操作。 active-class是哪个组件的属性？嵌套路由怎么定义？vue-router模块的router-link组件。 怎么定义vue-router的动态路由？怎么获取传过来的动态参数？答：在router目录下的index.js文件中，对path属性加上/:id。 使用router对象的params.id vue-router有哪几种导航钩子三种，一种是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。第二种：组件内的钩子；第三种：单独路由独享组件 scss是什么？安装使用的步骤是？有哪几大特性？预处理css，把css当前函数编写，定义变量,嵌套。 先装css-loader、node-loader、sass-loader等加载器模块，在webpack-base.config.js配置文件中加多一个拓展:extenstion，再加多一个模块：module里面test、loader css的预编译。 使用步骤：第一步：用npm 下三个loader（sass-loader、css-loader、node-sass）第二步：在build目录找到webpack.base.config.js，在那个extends属性中加一个拓展.scss第三步：还是在同一个文件，配置一个module属性第四步：然后在组件的style标签加上lang属性 ，例如：lang=”scss”有哪几大特性:1、可以用变量，例如（$变量名称=值）；2、可以用混合器，例如（）3、可以嵌套 mint-ui是什么？怎么使用？说出至少三个组件使用方法？基于vue的前端组件库。npm安装，然后import样式和js，vue.use（mintUi）全局引入。在单个组件局部引入：import {Toast} from ‘mint-ui’。组件一：Toast(‘登录成功’)；组件二：mint-header；组件三：mint-swiper v-model是什么？怎么使用？ vue中标签怎么绑定事件？答：可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。vue的model层的data属性。绑定事件： axios是什么？怎么使用？描述使用它实现登录功能的流程？答：请求后台资源的模块。npm install axios -S装好，然后发送的是跨域，需在配置文件中config/index.js进行设置。后台如果是Tp5则定义一个资源路由。js中使用import进来，然后.get或.post。返回在.then函数中如果成功，失败则是在.catch函数中 axios+tp5进阶中，调用axios.post(‘api/user’)是进行的什么操作？axios.put(‘api/user/8′)呢？跨域，添加用户操作，更新操作。 什么是RESTful API？怎么使用?答：是一个api的标准，无状态请求。请求的路由地址是固定的，如果是tp5则先路由配置中把资源路由配置好。标准有：.post .put .delete vuex是什么？怎么使用？哪种功能场景使用它？答：vue框架中状态管理。在main.js引入store，注入。新建了一个目录store，….. export 。场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车 mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？答：一个model+view+viewModel框架，数据模型model，viewModel连接两个区别：vue数据驱动，通过数据来显示视图层而不是节点操作。场景：数据操作比较多的场景，更加便捷 自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？答：全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。组件内定义指令：directives钩子函数：bind（绑定事件触发）、inserted(节点插入的时候触发)、update（组件内相关更新）钩子函数参数：el、binding 说出至少4种vue当中的指令和它的用法？答：v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定 vue-router是什么？它有哪些组件？答：vue用来写路由一个插件。router-link、router-view 导航钩子有哪些？它们有哪些参数？答：导航钩子有：a/全局钩子和组件内独享的钩子。b/beforeRouteEnter、afterEnter、beforeRouterUpdate、beforeRouteLeave参数：有to（去的那个路由）、from（离开的路由）、next（一定要用这个函数才能去到下一个路由，如果不用就拦截）最常用就这几种 Vue的双向数据绑定原理是什么？或者问（vue data是怎么实现的？）答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。具体步骤：第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:1、在自身实例化时往属性订阅器(dep)里面添加自己2、自身必须有一个update()方法3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。 请详细说下你对vue生命周期的理解？：总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。创建前/后： 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有。载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。更新前/后：当data变化时，会触发beforeUpdate和updated方法。销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在 请说下封装 vue 组件的过程？答：首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。 你是怎么认识vuex的？答：vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring等。通过状态（数据源）集中管理驱动组件的变化（好比spring的IOC容器对bean进行集中管理）。应用级的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。 vue-loader是什么？使用它的用途有哪些？答：解析.vue文件的一个加载器，跟template/js/style转换成js模块。用途：js可以写es6、style样式可以scss或less、template可以加jade等 请说出vue.cli项目中src目录每个文件夹和文件的用法？答：assets文件夹是放静态资源；components是放组件；router是定义路由相关的配置;view视图；app.vue是一个应用主组件；main.js是入口文件 vue.cli中怎样使用自定义的组件？有遇到过哪些问题吗？答：第一步：在components目录新建你的组件文件（smithButton.vue），script一定要export default {第二步：在需要用的页面（组件）中导入：import smithButton from ‘../components/smithButton.vue’第三步：注入到vue的子组件的components属性上面,components:{smithButton}第四步：在template视图view中使用， 问题有：smithButton命名，使用的时候则smith-button。 聊聊你对Vue.js的template编译的理解？答：简而言之，就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点）详情步骤：首先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等） vue响应式原理？vue-router实现原理？为什么要选vue？与其它框架对比的优势和劣势？vuejs与angularjs以及react的区别？vuex是用来做什么的？","categories":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/categories/All/"},{"name":"tools","slug":"All/tools","permalink":"http://NicolasGui.github.io/categories/All/tools/"}],"tags":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/tags/All/"},{"name":"vue","slug":"vue","permalink":"http://NicolasGui.github.io/tags/vue/"},{"name":"web前端","slug":"web前端","permalink":"http://NicolasGui.github.io/tags/web前端/"},{"name":"面试","slug":"面试","permalink":"http://NicolasGui.github.io/tags/面试/"}],"keywords":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/categories/All/"},{"name":"tools","slug":"All/tools","permalink":"http://NicolasGui.github.io/categories/All/tools/"}]},{"title":"Hexo+Github搭建个人博客","slug":"Hexo+Github搭建个人博客","date":"2017-10-26T07:19:12.000Z","updated":"2017-11-29T11:45:03.000Z","comments":true,"path":"2017/10/26/Hexo+Github搭建个人博客/","link":"","permalink":"http://NicolasGui.github.io/2017/10/26/Hexo+Github搭建个人博客/","excerpt":"","text":"欢迎来到我的博客驿站，本站是使用Hexo+Github基于基于Node.js的静态博客框架, 官方文档请参考Hexo Quick Start环境要求安装Node（基础环境）Node官网你可以根据不同平台系统选择你需要的Node.js安装包注意：Linux上安装Node.js需要安装Python 2.6 或 2.7 ，不建议安装Python 3.0以上版本。 安装Git目的：把本地的hexo内容提交到github上去.首先去GitHub申请个人账号，以便后期用来做博客的远程创库、域名、服务器之类的，github账号不再啰嗦了,跟一般的注册账号差不多，方便起见，顺便配置SSH Keys 安装Hexo开始之前，先切换NPM源， 解释一下，NPM是随同 NodeJS 一起安装的包管理工具，我们经常使用它来下载第三方包到本地。但在使用 NPM 过程很多人估计都知道，在国内下载第三方包的速度极其之慢。因此推荐使用淘宝 NPM 镜像，它是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 ，操作如下：终端/CMD里面：1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 如此一来就可以使用 cnpm 命令来安装模块了：1$ cnpm install xxxx 接下来开始安装Hexo，首先在你个人的workspace创建博客文件夹，如myblog然后cd到myblog里安装Hexo：1$ cnpm install -g hexo-cli 接下来执行init命令初始化你的hexo：1$ hexo init 至此，安装工作顺利完成！myblog就是你以后写博客的目录，所有的操作都在里面进行。 生成博客1$ hexo g 预览博客1$ hexo s 接下来在浏览器地址栏输入：localhost:4000回车就可以预览你的博客了 发布博客1$ hexo d 托管到gitHub创建repository创建一个与自己用户名同名的repository在自己Github主页右下角，创建一个新的repository。比如我的Github账号是NicolasGui，那么我应该创建的repository名字应该是NicolasGui.github.io。 添加git配置首先在主题的配置文件_config.yml里面添加1234deploy: type: git repository: http://github.com/NicolasGui/NicolasGui.github.io.git branch: master repository：就是你的gitHub同名仓库的地址 代码上传安装 hexo-deployer-git依赖包1npm install hexo-deployer-git --save 然后使用如下命令 1hexo d 此时你可以在浏览器地址栏输入 “用户名.github.io.git”来访问你的个人博客(用户名：你gitHub的用户名) 域名绑定域名申请域名申请的途径非常多，建议使用阿里云的，方便后期备案，在阿里云购买了域名之后，到域名管理中心进行域名解析，添加以下几条记录值： 记录类型 主机记录 解析线路(isp) 记录值 CNAME www 默认 用户名.github.io A @ 默认 192.30.252.153 A @ 默认 192.30.252.154 接下来在public目录新建名为CNAME的文件，注意，没有后缀名然后在CNAME文件里面填写你的域名，如：xxx.com 注意：不带www也不带http，只需要域名就好接下来分别执行hexo g重新生成一下博客1hexo g 然后再上传到git1hexo d 之后就可以使用域名访问你的个人博客了","categories":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/categories/All/"},{"name":"Hexo","slug":"All/Hexo","permalink":"http://NicolasGui.github.io/categories/All/Hexo/"}],"tags":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/tags/All/"},{"name":"Hexo","slug":"Hexo","permalink":"http://NicolasGui.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"http://NicolasGui.github.io/tags/Github/"}],"keywords":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/categories/All/"},{"name":"Hexo","slug":"All/Hexo","permalink":"http://NicolasGui.github.io/categories/All/Hexo/"}]},{"title":"前端常用开发工具","slug":"前端开发工具","date":"2017-04-26T07:02:29.000Z","updated":"2017-11-29T11:44:58.000Z","comments":true,"path":"2017/04/26/前端开发工具/","link":"","permalink":"http://NicolasGui.github.io/2017/04/26/前端开发工具/","excerpt":"","text":"简介本文分享了前端常用开发工具以及在开发/过程中常用软件，收费软件附带破解，免费且百度能下载的软件烦请自行百度下载 软件列表开发类 Webstrom editplus JDK1.7 adt-bundle MindManager Fireworks_cs6 Adobe Photoshop CC 2017 代码压缩工具 node6.10 颜色拾取器 xampp topspeeder AxureRP-Pro 办公类 wps Microsoft Office 2016 pdf 系统工具类 Microsoft.framework4.0 winrar 百度网盘地址：点我 ,密码：9h7i","categories":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/categories/All/"},{"name":"tools","slug":"All/tools","permalink":"http://NicolasGui.github.io/categories/All/tools/"}],"tags":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/tags/All/"},{"name":"web前端","slug":"web前端","permalink":"http://NicolasGui.github.io/tags/web前端/"},{"name":"开发工具","slug":"开发工具","permalink":"http://NicolasGui.github.io/tags/开发工具/"}],"keywords":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/categories/All/"},{"name":"tools","slug":"All/tools","permalink":"http://NicolasGui.github.io/categories/All/tools/"}]},{"title":"使用mac自带阿帕奇","slug":"使用mac自带阿帕奇","date":"2017-02-24T07:02:29.000Z","updated":"2017-11-29T11:44:56.000Z","comments":true,"path":"2017/02/24/使用mac自带阿帕奇/","link":"","permalink":"http://NicolasGui.github.io/2017/02/24/使用mac自带阿帕奇/","excerpt":"","text":"简介Apache对于前端程序员来说是必不可少的一款web服务器，Mac系统自身带了apache，可以直接用来搭建本地web服务器，配置过程相对比较简单，本文将做简要描述，开始吧 启动Apachemac是默认自动启动Apache的，判断mac是否启动了Apache很简单，浏览器地址栏输入http://127.0.0.1 回车即可，如果页面显示It works！证明ok，介绍几个常用命令： 12345sudo apachectl start //开启apachesudo apachectl restart //重启apachesudo apachectl stop //关闭apache: 基本配置更改work spaceApache在Windows下默认work space为htdocs，在mac下有所区别，路径为：/Library/WebServer/Documents因此我们需要把前端代码拷贝到该目录进行测试，但是该目录藏这么深在实际使用过程中显然是比较麻烦的，因此接下来我们通过修改阿帕奇主配置文件httpd.conf来指定work space，步骤如下：mac配置文件目录为：/etc ，默认是隐藏的，因此咱们在终端里面执行：open /etc/apache2/ 就可以打开Apache主目录，找到httpd.conf文件，使用文本编辑器打开该文件， 如果不想那么麻烦的话可以使用vi编辑，命令如下： 1sudo vi /etc/apache2/httpd.conf 编辑以下内容，原本为：12DocumentRoot \"/Library/WebServer/Documents\"&lt;Directory \"/Library/WebServer/Documents\"&gt; 修改为自定义目录，比如我改成根目录的sites文件夹，那就是：12DocumentRoot \"/Users/用户名/Sites\"&lt;Directory \"/Users/用户名/Sites\"&gt; 这样子的话我们就可以把Apache的work space更改到根路径下的sites了，需要注意的是，如果使用sudo vi /etc/apache2/httpd.conf命令打开，那么你需要先按一下i才能编辑，编辑完了以后按下esc，然后输入:wq回车就可以保存退出了 更改默认端口跟更改默认工作空间一样的方式打开httpd.conf，找到Listen 80这一行，将80改为你需要的端口就好 显示文件目录Apache在没有index的情况下默认不会显示文件目录，可以通过修改httpd.conf实现文件列表的展示，方便调试操作如下：将httpd.conf里面Options FollowSymLinks Multiviews之后加上Indexes，修改之后为1Options FollowSymLinks Multiviews Indexes","categories":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/categories/All/"},{"name":"mac","slug":"All/mac","permalink":"http://NicolasGui.github.io/categories/All/mac/"}],"tags":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/tags/All/"},{"name":"mac","slug":"mac","permalink":"http://NicolasGui.github.io/tags/mac/"},{"name":"服务器","slug":"服务器","permalink":"http://NicolasGui.github.io/tags/服务器/"}],"keywords":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/categories/All/"},{"name":"mac","slug":"All/mac","permalink":"http://NicolasGui.github.io/categories/All/mac/"}]},{"title":"vue-router插件","slug":"vue-router","date":"2017-01-26T07:02:29.000Z","updated":"2017-11-29T11:45:09.000Z","comments":true,"path":"2017/01/26/vue-router/","link":"","permalink":"http://NicolasGui.github.io/2017/01/26/vue-router/","excerpt":"","text":"简介vue-router就是SPA（单页应用）的路径管理器。通俗的说，vue-router就是我们WebApp的链接路径管理系统。它跟前端的a标签区别是什么？因为我们用Vue做的是单页应用，就相当于只有一个主的index.html页面，所以你写的a标签是不起作用的，你必须使用vue-router来对路径进行管理。 安装vue-routervue-router是一个插件，所以需要用npm来进行安装的。在命令行工具里面，进入你的项目目录，输入下面命令。1npm install vue-router --save 如果你是通过vue-cli构建项目时已经选择安装了vue-router，那就不需要重复安装。如果npm install vue-router –save安装比较慢的话，切换到淘宝镜像然后使用cnpm install vue-router –save，切换方法如下：1npm install -g cnpm --registry=https://registry.npm.taobao.org vue-router文件解读安装完vue-router，我们先在src/router/路径下找到index.js文件，这个js就是路由的核心文件，打开1234567891011121314151617181920import Vue from 'vue' //引入Vueimport Router from 'vue-router' //引入vue-routerimport Hello from '@/components/Hello' //引入默认的Hello.vue组件import Test from '@/components/Test' //引入测试vue组件Vue.use(Router) //全局使用Router export default new Router(&#123;//配置路由 routes: [ &#123; //每一个对象代表一个路由 path: '/', //链接路径 name: 'Hello', //路由名称， component: Hello //对应的组件模板 &#125;,&#123; path:'/Test', name:'Test', component:Test &#125; ]&#125;) 然后我们就可以在App.vue里面通过router-view来展示我们的组件内容 router-link我们说router是做路径管理的，那么我们就可以通过router-link来控制组件的切换1&lt;router-link to=\"组件路径\"&gt;链接内容&lt;/router-link&gt; 在这里解释一下，to：是我们的导航路径，要填写的是你在router/index.js文件里配置的path值，如果要导航到默认首页，只需要写成 to=”/” ，比如：1234&lt;ul&gt; &lt;li&gt;&lt;router-link to=\"/\"&gt;首页&lt;/router-link&gt;&lt;/li&gt; &lt;li&gt;&lt;router-link to=\"/Test\"&gt;Test页面&lt;/router-link&gt;&lt;/li&gt; &lt;/ul&gt;","categories":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/categories/All/"},{"name":"vue","slug":"All/vue","permalink":"http://NicolasGui.github.io/categories/All/vue/"}],"tags":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/tags/All/"},{"name":"vue","slug":"vue","permalink":"http://NicolasGui.github.io/tags/vue/"},{"name":"web前端","slug":"web前端","permalink":"http://NicolasGui.github.io/tags/web前端/"},{"name":"路由","slug":"路由","permalink":"http://NicolasGui.github.io/tags/路由/"}],"keywords":[{"name":"All","slug":"All","permalink":"http://NicolasGui.github.io/categories/All/"},{"name":"vue","slug":"All/vue","permalink":"http://NicolasGui.github.io/categories/All/vue/"}]}]}