<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Don&#39;t BB,show me the code!</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://NicolasGui.github.io/"/>
  <updated>2017-12-18T09:48:39.622Z</updated>
  <id>http://NicolasGui.github.io/</id>
  
  <author>
    <name>Nicolas</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web前端面试题之vue</title>
    <link href="http://NicolasGui.github.io/2017/12/18/web%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8Bvue/"/>
    <id>http://NicolasGui.github.io/2017/12/18/web前端面试题之vue/</id>
    <published>2017-12-18T07:02:29.000Z</published>
    <updated>2017-12-18T09:48:39.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="请说下具体使用vue的理解？"><a href="#请说下具体使用vue的理解？" class="headerlink" title="请说下具体使用vue的理解？"></a>请说下具体使用vue的理解？</h3><p>答：<br>    1、使用vue不必担心布局更改和类名重复导致的js重写，因为它是靠数据驱动双向绑定，底层是通过Object.defineProperty() 定义的数据 set、get 函数原理实现。<br>    2、组件化开发，让项目的可拓展性、移植性更好，代码重用性更高，就好像农民工建房子，拿起自己的工具包就可以开工。项目经理坐等收楼就好。<br>    3、单页应用的体验零距离接触安卓原生应用，局部组件更新界面，让用户体验更快速省时。<br>    4、js的代码无形的规范，团队合作开发代码可阅读性更高</p><h3 id="你觉得哪些项目适合vue框架？"><a href="#你觉得哪些项目适合vue框架？" class="headerlink" title="你觉得哪些项目适合vue框架？"></a>你觉得哪些项目适合vue框架？</h3><p>答：<br>    1、数据信息量比较多的，反之类似企业网站就无需此框架了。<br>    2、手机web和app应用多端共用一套界面的项目，因为使用vue.cli+webpack后的前端目录，非常有利于项目的跨平台部署。</p><h3 id="怎么理解MVVM模式的这些框架？"><a href="#怎么理解MVVM模式的这些框架？" class="headerlink" title="怎么理解MVVM模式的这些框架？"></a>怎么理解MVVM模式的这些框架？</h3><p>答：<br>    1、M就是Model模型层，存的一个数据对象。<br>    2、V就是View视图层，所有的html节点在这一层。<br>    3、VM就是ViewModel，它通过data属性连接Model模型层，通过el属性连接View视图层。</p><h3 id="PC端项目你会在哪些场景使用Vue框架？"><a href="#PC端项目你会在哪些场景使用Vue框架？" class="headerlink" title="PC端项目你会在哪些场景使用Vue框架？"></a>PC端项目你会在哪些场景使用Vue框架？</h3><p>答：上万级数据需要瀑布流更新和搜索的时候，因为数据庞大的时候，用原生的dom操作js和html都会有列表的html布局，迭代很困难。再一个dom节点的大面积添加会影响性能。<br>    那么vue为什么解决这些问题呢？<br>        第一：只需用v-for在view层一个地方遍历数据即可，无需复制一段html代码在js和html两个地方。<br>        第二：vue通过Virtual Dom就是在js中模拟DOM对象树来优化DOM操作。</p><h3 id="active-class是哪个组件的属性？嵌套路由怎么定义？"><a href="#active-class是哪个组件的属性？嵌套路由怎么定义？" class="headerlink" title="active-class是哪个组件的属性？嵌套路由怎么定义？"></a>active-class是哪个组件的属性？嵌套路由怎么定义？</h3><pre><code>vue-router模块的router-link组件。</code></pre><h3 id="怎么定义vue-router的动态路由？怎么获取传过来的动态参数？"><a href="#怎么定义vue-router的动态路由？怎么获取传过来的动态参数？" class="headerlink" title="怎么定义vue-router的动态路由？怎么获取传过来的动态参数？"></a>怎么定义vue-router的动态路由？怎么获取传过来的动态参数？</h3><p>答：在router目录下的index.js文件中，对path属性加上/:id。  使用router对象的params.id</p><h3 id="vue-router有哪几种导航钩子"><a href="#vue-router有哪几种导航钩子" class="headerlink" title="vue-router有哪几种导航钩子"></a>vue-router有哪几种导航钩子</h3><pre><code>三种，一种是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。第二种：组件内的钩子；第三种：单独路由独享组件</code></pre><h3 id="scss是什么？安装使用的步骤是？有哪几大特性？"><a href="#scss是什么？安装使用的步骤是？有哪几大特性？" class="headerlink" title="scss是什么？安装使用的步骤是？有哪几大特性？"></a>scss是什么？安装使用的步骤是？有哪几大特性？</h3><pre><code>预处理css，把css当前函数编写，定义变量,嵌套。 先装css-loader、node-loader、sass-loader等加载器模块，在webpack-base.config.js配置文件中加多一个拓展:extenstion，再加多一个模块：module里面test、loadercss的预编译。</code></pre><p>使用步骤：<br>第一步：用npm 下三个loader（sass-loader、css-loader、node-sass）<br>第二步：在build目录找到webpack.base.config.js，在那个extends属性中加一个拓展.scss<br>第三步：还是在同一个文件，配置一个module属性<br>第四步：然后在组件的style标签加上lang属性 ，例如：lang=”scss”<br>有哪几大特性:<br>1、可以用变量，例如（$变量名称=值）；<br>2、可以用混合器，例如（）<br>3、可以嵌套</p><h3 id="mint-ui是什么？怎么使用？说出至少三个组件使用方法？"><a href="#mint-ui是什么？怎么使用？说出至少三个组件使用方法？" class="headerlink" title="mint-ui是什么？怎么使用？说出至少三个组件使用方法？"></a>mint-ui是什么？怎么使用？说出至少三个组件使用方法？</h3><p>基于vue的前端组件库。npm安装，然后import样式和js，vue.use（mintUi）全局引入。在单个组件局部引入：import {Toast} from ‘mint-ui’。组件一：Toast(‘登录成功’)；组件二：mint-header；组件三：mint-swiper</p><h3 id="v-model是什么？怎么使用？-vue中标签怎么绑定事件？"><a href="#v-model是什么？怎么使用？-vue中标签怎么绑定事件？" class="headerlink" title="v-model是什么？怎么使用？ vue中标签怎么绑定事件？"></a>v-model是什么？怎么使用？ vue中标签怎么绑定事件？</h3><p>答：可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。vue的model层的data属性。绑定事件：<input @click="doLog()"></p><h3 id="axios是什么？怎么使用？描述使用它实现登录功能的流程？"><a href="#axios是什么？怎么使用？描述使用它实现登录功能的流程？" class="headerlink" title="axios是什么？怎么使用？描述使用它实现登录功能的流程？"></a>axios是什么？怎么使用？描述使用它实现登录功能的流程？</h3><p>答：请求后台资源的模块。npm install axios -S装好，然后发送的是跨域，需在配置文件中config/index.js进行设置。后台如果是Tp5则定义一个资源路由。js中使用import进来，然后.get或.post。返回在.then函数中如果成功，失败则是在.catch函数中</p><h3 id="axios-tp5进阶中，调用axios-post-‘api-user’-是进行的什么操作？"><a href="#axios-tp5进阶中，调用axios-post-‘api-user’-是进行的什么操作？" class="headerlink" title="axios+tp5进阶中，调用axios.post(‘api/user’)是进行的什么操作？"></a>axios+tp5进阶中，调用axios.post(‘api/user’)是进行的什么操作？</h3><p>axios.put(‘api/user/8′)呢？<br>跨域，添加用户操作，更新操作。</p><h3 id="什么是RESTful-API？怎么使用"><a href="#什么是RESTful-API？怎么使用" class="headerlink" title="什么是RESTful API？怎么使用?"></a>什么是RESTful API？怎么使用?</h3><p>答：是一个api的标准，无状态请求。请求的路由地址是固定的，如果是tp5则先路由配置中把资源路由配置好。标准有：.post .put .delete</p><h3 id="vuex是什么？怎么使用？哪种功能场景使用它？"><a href="#vuex是什么？怎么使用？哪种功能场景使用它？" class="headerlink" title="vuex是什么？怎么使用？哪种功能场景使用它？"></a>vuex是什么？怎么使用？哪种功能场景使用它？</h3><p>答：vue框架中状态管理。在main.js引入store，注入。新建了一个目录store，….. export 。场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车</p><h3 id="mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？"><a href="#mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？" class="headerlink" title="mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？"></a>mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？</h3><p>答：一个model+view+viewModel框架，数据模型model，viewModel连接两个<br>区别：vue数据驱动，通过数据来显示视图层而不是节点操作。<br>场景：数据操作比较多的场景，更加便捷</p><h3 id="自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？"><a href="#自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？" class="headerlink" title="自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？"></a>自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？</h3><p>答：全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。组件内定义指令：directives<br>钩子函数：bind（绑定事件触发）、inserted(节点插入的时候触发)、update（组件内相关更新）<br>钩子函数参数：el、binding</p><h3 id="说出至少4种vue当中的指令和它的用法？"><a href="#说出至少4种vue当中的指令和它的用法？" class="headerlink" title="说出至少4种vue当中的指令和它的用法？"></a>说出至少4种vue当中的指令和它的用法？</h3><p>答：v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定</p><h3 id="vue-router是什么？它有哪些组件？"><a href="#vue-router是什么？它有哪些组件？" class="headerlink" title="vue-router是什么？它有哪些组件？"></a>vue-router是什么？它有哪些组件？</h3><p>答：vue用来写路由一个插件。router-link、router-view</p><h3 id="导航钩子有哪些？它们有哪些参数？"><a href="#导航钩子有哪些？它们有哪些参数？" class="headerlink" title="导航钩子有哪些？它们有哪些参数？"></a>导航钩子有哪些？它们有哪些参数？</h3><p>答：导航钩子有：a/全局钩子和组件内独享的钩子。b/beforeRouteEnter、afterEnter、beforeRouterUpdate、beforeRouteLeave<br>参数：有to（去的那个路由）、from（离开的路由）、next（一定要用这个函数才能去到下一个路由，如果不用就拦截）最常用就这几种</p><h3 id="Vue的双向数据绑定原理是什么？或者问（vue-data是怎么实现的？）"><a href="#Vue的双向数据绑定原理是什么？或者问（vue-data是怎么实现的？）" class="headerlink" title="Vue的双向数据绑定原理是什么？或者问（vue data是怎么实现的？）"></a>Vue的双向数据绑定原理是什么？或者问（vue data是怎么实现的？）</h3><p>答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。<br>具体步骤：<br>第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter<br>这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化<br>第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图<br>第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:<br>1、在自身实例化时往属性订阅器(dep)里面添加自己<br>2、自身必须有一个update()方法<br>3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。<br>第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p><h3 id="请详细说下你对vue生命周期的理解？"><a href="#请详细说下你对vue生命周期的理解？" class="headerlink" title="请详细说下你对vue生命周期的理解？"></a>请详细说下你对vue生命周期的理解？</h3><p>：总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。<br>创建前/后： 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有。<br>载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。<br>更新前/后：当data变化时，会触发beforeUpdate和updated方法。<br>销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在</p><h3 id="请说下封装-vue-组件的过程？"><a href="#请说下封装-vue-组件的过程？" class="headerlink" title="请说下封装 vue 组件的过程？"></a>请说下封装 vue 组件的过程？</h3><p>答：首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。<br>然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。</p><h3 id="你是怎么认识vuex的？"><a href="#你是怎么认识vuex的？" class="headerlink" title="你是怎么认识vuex的？"></a>你是怎么认识vuex的？</h3><p>答：vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring等。<br>通过状态（数据源）集中管理驱动组件的变化（好比spring的IOC容器对bean进行集中管理）。<br>应用级的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。</p><h3 id="vue-loader是什么？使用它的用途有哪些？"><a href="#vue-loader是什么？使用它的用途有哪些？" class="headerlink" title="vue-loader是什么？使用它的用途有哪些？"></a>vue-loader是什么？使用它的用途有哪些？</h3><p>答：解析.vue文件的一个加载器，跟template/js/style转换成js模块。<br>用途：js可以写es6、style样式可以scss或less、template可以加jade等</p><h3 id="请说出vue-cli项目中src目录每个文件夹和文件的用法？"><a href="#请说出vue-cli项目中src目录每个文件夹和文件的用法？" class="headerlink" title="请说出vue.cli项目中src目录每个文件夹和文件的用法？"></a>请说出vue.cli项目中src目录每个文件夹和文件的用法？</h3><p>答：assets文件夹是放静态资源；components是放组件；router是定义路由相关的配置;view视图；app.vue是一个应用主组件；main.js是入口文件</p><h3 id="vue-cli中怎样使用自定义的组件？有遇到过哪些问题吗？"><a href="#vue-cli中怎样使用自定义的组件？有遇到过哪些问题吗？" class="headerlink" title="vue.cli中怎样使用自定义的组件？有遇到过哪些问题吗？"></a>vue.cli中怎样使用自定义的组件？有遇到过哪些问题吗？</h3><p>答：第一步：在components目录新建你的组件文件（smithButton.vue），script一定要export default {<br>第二步：在需要用的页面（组件）中导入：import smithButton from ‘../components/smithButton.vue’<br>第三步：注入到vue的子组件的components属性上面,components:{smithButton}<br>第四步：在template视图view中使用，<smith-button>  </smith-button><br>问题有：smithButton命名，使用的时候则smith-button。</p><h3 id="聊聊你对Vue-js的template编译的理解？"><a href="#聊聊你对Vue-js的template编译的理解？" class="headerlink" title="聊聊你对Vue.js的template编译的理解？"></a>聊聊你对Vue.js的template编译的理解？</h3><p>答：简而言之，就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点）<br>详情步骤：<br>首先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。<br>然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）</p><h3 id="vue响应式原理？"><a href="#vue响应式原理？" class="headerlink" title="vue响应式原理？"></a>vue响应式原理？</h3><h3 id="vue-router实现原理？"><a href="#vue-router实现原理？" class="headerlink" title="vue-router实现原理？"></a>vue-router实现原理？</h3><h3 id="为什么要选vue？与其它框架对比的优势和劣势？"><a href="#为什么要选vue？与其它框架对比的优势和劣势？" class="headerlink" title="为什么要选vue？与其它框架对比的优势和劣势？"></a>为什么要选vue？与其它框架对比的优势和劣势？</h3><h3 id="vuejs与angularjs以及react的区别？"><a href="#vuejs与angularjs以及react的区别？" class="headerlink" title="vuejs与angularjs以及react的区别？"></a>vuejs与angularjs以及react的区别？</h3><h3 id="vuex是用来做什么的？"><a href="#vuex是用来做什么的？" class="headerlink" title="vuex是用来做什么的？"></a>vuex是用来做什么的？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;请说下具体使用vue的理解？&quot;&gt;&lt;a href=&quot;#请说下具体使用vue的理解？&quot; class=&quot;headerlink&quot; title=&quot;请说下具体使用vue的理解？&quot;&gt;&lt;/a&gt;请说下具体使用vue的理解？&lt;/h3&gt;&lt;p&gt;答：&lt;br&gt;    1、使用vue不必担心布
      
    
    </summary>
    
      <category term="All" scheme="http://NicolasGui.github.io/categories/All/"/>
    
      <category term="tools" scheme="http://NicolasGui.github.io/categories/All/tools/"/>
    
    
      <category term="All" scheme="http://NicolasGui.github.io/tags/All/"/>
    
      <category term="vue" scheme="http://NicolasGui.github.io/tags/vue/"/>
    
      <category term="web前端" scheme="http://NicolasGui.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面试" scheme="http://NicolasGui.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建个人博客</title>
    <link href="http://NicolasGui.github.io/2017/10/26/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://NicolasGui.github.io/2017/10/26/Hexo+Github搭建个人博客/</id>
    <published>2017-10-26T07:19:12.000Z</published>
    <updated>2017-11-29T11:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客驿站，本站是使用Hexo+Github基于基于Node.js的静态博客框架, 官方文档请参考<a href="https://hexo.io" target="_blank" rel="external">Hexo</a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><h4 id="安装Node（基础环境）"><a href="#安装Node（基础环境）" class="headerlink" title="安装Node（基础环境）"></a>安装Node（基础环境）</h4><p><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node官网</a>你可以根据不同平台系统选择你需要的Node.js安装包<br>注意：Linux上安装Node.js需要安装Python 2.6 或 2.7 ，不建议安装Python 3.0以上版本。</p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>目的：把本地的hexo内容提交到github上去.首先去<a href="http://www.github.com" target="_blank" rel="external">GitHub</a>申请个人账号，以便后期用来做博客的远程创库、域名、服务器之类的，github账号不再啰嗦了,跟一般的注册账号差不多，方便起见，顺便配置SSH Keys</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>开始之前，先切换NPM源， 解释一下，NPM是随同 NodeJS 一起安装的包管理工具，我们经常使用它来下载第三方包到本地。<br>但在使用 NPM 过程很多人估计都知道，在国内下载第三方包的速度极其之慢。因此推荐使用淘宝 NPM 镜像，它是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 ，操作如下：<br>终端/CMD里面：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p><p>如此一来就可以使用 cnpm 命令来安装模块了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install xxxx</div></pre></td></tr></table></figure></p><p>接下来开始安装Hexo，首先在你个人的workspace创建博客文件夹，如myblog<br>然后cd到myblog里安装Hexo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cnpm install -g hexo-cli</div></pre></td></tr></table></figure></p><p>接下来执行init命令初始化你的hexo：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure></p><p>至此，安装工作顺利完成！myblog就是你以后写博客的目录，所有的操作都在里面进行。</p><h3 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure><h3 id="预览博客"><a href="#预览博客" class="headerlink" title="预览博客"></a>预览博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure><p>接下来在浏览器地址栏输入：localhost:4000回车就可以预览你的博客了</p><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure><h3 id="托管到gitHub"><a href="#托管到gitHub" class="headerlink" title="托管到gitHub"></a>托管到gitHub</h3><h4 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h4><p>创建一个与自己用户名同名的repository<br>在自己Github主页右下角，创建一个新的repository。比如我的Github账号是NicolasGui，那么我应该创建的repository名字应该是NicolasGui.github.io。</p><h4 id="添加git配置"><a href="#添加git配置" class="headerlink" title="添加git配置"></a>添加git配置</h4><p>首先在主题的配置文件_config.yml里面添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: http://github.com/NicolasGui/NicolasGui.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><p>repository：就是你的gitHub同名仓库的地址</p><h4 id="代码上传"><a href="#代码上传" class="headerlink" title="代码上传"></a>代码上传</h4><p>安装 hexo-deployer-git依赖包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p><p>然后使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure><p>此时你可以在浏览器地址栏输入 “用户名.github.io.git”来访问你的个人博客<br>(用户名：你gitHub的用户名)</p><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><h4 id="域名申请"><a href="#域名申请" class="headerlink" title="域名申请"></a>域名申请</h4><p>域名申请的途径非常多，建议使用<a href="http://www.aliyun.com" target="_blank" rel="external">阿里云</a>的，方便后期备案，在阿里云购买了域名之后，到域名管理中心进行域名解析，添加以下几条记录值：</p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>解析线路(isp)</th><th>记录值</th></tr></thead><tbody><tr><td>CNAME</td><td>www</td><td>默认</td><td>用户名.github.io</td></tr><tr><td>A</td><td>@</td><td>默认</td><td>192.30.252.153</td></tr><tr><td>A</td><td>@</td><td>默认</td><td>192.30.252.154</td></tr></tbody></table><p>接下来在public目录新建名为CNAME的文件，注意，没有后缀名<br>然后在CNAME文件里面填写你的域名，如：xxx.com   注意：不带www也不带http，只需要域名就好<br>接下来分别执行hexo g重新生成一下博客<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure></p><p>然后再上传到git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure></p><p>之后就可以使用域名访问你的个人博客了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎来到我的博客驿站，本站是使用Hexo+Github基于基于Node.js的静态博客框架, 官方文档请参考&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Quick
      
    
    </summary>
    
      <category term="All" scheme="http://NicolasGui.github.io/categories/All/"/>
    
      <category term="Hexo" scheme="http://NicolasGui.github.io/categories/All/Hexo/"/>
    
    
      <category term="All" scheme="http://NicolasGui.github.io/tags/All/"/>
    
      <category term="Hexo" scheme="http://NicolasGui.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="http://NicolasGui.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>前端常用开发工具</title>
    <link href="http://NicolasGui.github.io/2017/04/26/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://NicolasGui.github.io/2017/04/26/前端开发工具/</id>
    <published>2017-04-26T07:02:29.000Z</published>
    <updated>2017-11-29T11:44:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文分享了前端常用开发工具以及在开发/过程中常用软件，收费软件附带破解，免费且百度能下载的软件烦请自行百度下载</p><hr><h2 id="软件列表"><a href="#软件列表" class="headerlink" title="软件列表"></a>软件列表</h2><h3 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h3><ul><li>Webstrom</li><li>editplus</li><li>JDK1.7</li><li>adt-bundle</li><li>MindManager</li><li>Fireworks_cs6</li><li>Adobe Photoshop CC 2017</li><li>代码压缩工具</li><li>node6.10</li><li>颜色拾取器</li><li>xampp</li><li>topspeeder</li><li>AxureRP-Pro</li></ul><hr><h3 id="办公类"><a href="#办公类" class="headerlink" title="办公类"></a>办公类</h3><ul><li>wps</li><li>Microsoft Office 2016</li><li>pdf</li></ul><hr><h3 id="系统工具类"><a href="#系统工具类" class="headerlink" title="系统工具类"></a>系统工具类</h3><ul><li>Microsoft.framework4.0</li><li>winrar</li></ul><hr><p>百度网盘地址：<a href="https://pan.baidu.com/s/1jIaALZS" target="_blank" rel="external">点我</a> ,密码：9h7i</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本文分享了前端常用开发工具以及在开发/过程中常用软件，收费软件附带破解，免费且百度能下载的软件烦请自行百度下载&lt;/p&gt;
&lt;hr&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="All" scheme="http://NicolasGui.github.io/categories/All/"/>
    
      <category term="tools" scheme="http://NicolasGui.github.io/categories/All/tools/"/>
    
    
      <category term="All" scheme="http://NicolasGui.github.io/tags/All/"/>
    
      <category term="web前端" scheme="http://NicolasGui.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="开发工具" scheme="http://NicolasGui.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用mac自带阿帕奇</title>
    <link href="http://NicolasGui.github.io/2017/02/24/%E4%BD%BF%E7%94%A8mac%E8%87%AA%E5%B8%A6%E9%98%BF%E5%B8%95%E5%A5%87/"/>
    <id>http://NicolasGui.github.io/2017/02/24/使用mac自带阿帕奇/</id>
    <published>2017-02-24T07:02:29.000Z</published>
    <updated>2017-11-29T11:44:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Apache对于前端程序员来说是必不可少的一款web服务器，Mac系统自身带了apache，可以直接用来搭建本地web服务器，配置过程相对比较简单，本文将做简要描述，开始吧</p><h3 id="启动Apache"><a href="#启动Apache" class="headerlink" title="启动Apache"></a>启动Apache</h3><p>mac是默认自动启动Apache的，判断mac是否启动了Apache很简单，浏览器地址栏输入<a href="http://127.0.0.1" target="_blank" rel="external">http://127.0.0.1</a>   回车即可，如果页面显示It works！证明ok，介绍几个常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apachectl start   //开启apache</div><div class="line"></div><div class="line">sudo apachectl restart   //重启apache</div><div class="line"></div><div class="line">sudo apachectl stop    //关闭apache:</div></pre></td></tr></table></figure><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="更改work-space"><a href="#更改work-space" class="headerlink" title="更改work space"></a>更改work space</h4><p>Apache在Windows下默认work space为htdocs，在mac下有所区别，路径为：/Library/WebServer/Documents<br>因此我们需要把前端代码拷贝到该目录进行测试，但是该目录藏这么深在实际使用过程中显然是比较麻烦的，因此接下来我们通过修改阿帕奇主配置文件httpd.conf来指定work space，步骤如下：<br>mac配置文件目录为：/etc ，默认是隐藏的，因此咱们在终端里面执行：open /etc/apache2/  就可以打开Apache主目录，找到httpd.conf文件，使用文本编辑器打开该文件， 如果不想那么麻烦的话可以使用vi编辑，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/apache2/httpd.conf</div></pre></td></tr></table></figure><p>编辑以下内容，原本为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DocumentRoot <span class="string">"/Library/WebServer/Documents"</span></div><div class="line">&lt;Directory <span class="string">"/Library/WebServer/Documents"</span>&gt;</div></pre></td></tr></table></figure></p><p>修改为自定义目录，比如我改成根目录的sites文件夹，那就是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DocumentRoot <span class="string">"/Users/用户名/Sites"</span></div><div class="line">&lt;Directory <span class="string">"/Users/用户名/Sites"</span>&gt;</div></pre></td></tr></table></figure></p><p>这样子的话我们就可以把Apache的work space更改到根路径下的sites了，需要注意的是，如果使用sudo vi /etc/apache2/httpd.conf命令打开，那么你需要先按一下i才能编辑，编辑完了以后按下esc，然后输入:wq回车就可以保存退出了</p><h4 id="更改默认端口"><a href="#更改默认端口" class="headerlink" title="更改默认端口"></a>更改默认端口</h4><p>跟更改默认工作空间一样的方式打开httpd.conf，找到Listen 80这一行，将80改为你需要的端口就好</p><h4 id="显示文件目录"><a href="#显示文件目录" class="headerlink" title="显示文件目录"></a>显示文件目录</h4><p>Apache在没有index的情况下默认不会显示文件目录，可以通过修改httpd.conf实现文件列表的展示，方便调试操作如下：<br>将httpd.conf里面Options FollowSymLinks Multiviews之后加上Indexes，修改之后为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Options FollowSymLinks Multiviews Indexes</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Apache对于前端程序员来说是必不可少的一款web服务器，Mac系统自身带了apache，可以直接用来搭建本地web服务器，配置过程相对比
      
    
    </summary>
    
      <category term="All" scheme="http://NicolasGui.github.io/categories/All/"/>
    
      <category term="mac" scheme="http://NicolasGui.github.io/categories/All/mac/"/>
    
    
      <category term="All" scheme="http://NicolasGui.github.io/tags/All/"/>
    
      <category term="mac" scheme="http://NicolasGui.github.io/tags/mac/"/>
    
      <category term="服务器" scheme="http://NicolasGui.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>vue-router插件</title>
    <link href="http://NicolasGui.github.io/2017/01/26/vue-router/"/>
    <id>http://NicolasGui.github.io/2017/01/26/vue-router/</id>
    <published>2017-01-26T07:02:29.000Z</published>
    <updated>2017-11-29T11:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>vue-router就是SPA（单页应用）的路径管理器。通俗的说，vue-router就是我们WebApp的链接路径管理系统。它跟前端的a标签区别是什么？因为我们用Vue做的是单页应用，就相当于只有一个主的index.html页面，所以你写的a标签是不起作用的，你必须使用vue-router来对路径进行管理。</p><h3 id="安装vue-router"><a href="#安装vue-router" class="headerlink" title="安装vue-router"></a>安装vue-router</h3><p>vue-router是一个插件，所以需要用npm来进行安装的。在命令行工具里面，进入你的项目目录，输入下面命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-router --save</div></pre></td></tr></table></figure></p><p>如果你是通过vue-cli构建项目时已经选择安装了vue-router，那就不需要重复安装。如果npm install vue-router –save安装比较慢的话，切换到淘宝镜像然后使用cnpm install vue-router –save，切换方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p><h3 id="vue-router文件解读"><a href="#vue-router文件解读" class="headerlink" title="vue-router文件解读"></a>vue-router文件解读</h3><p>安装完vue-router，我们先在src/router/路径下找到index.js文件，这个js就是路由的核心文件，打开<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import Vue from <span class="string">'vue'</span>   //引入Vue</div><div class="line">import Router from <span class="string">'vue-router'</span>  //引入vue-router</div><div class="line">import Hello from <span class="string">'@/components/Hello'</span>  //引入默认的Hello.vue组件</div><div class="line">import Test from <span class="string">'@/components/Test'</span>  //引入测试vue组件</div><div class="line"></div><div class="line">Vue.use(Router)  //全局使用Router</div><div class="line"> </div><div class="line"><span class="built_in">export</span> default new Router(&#123;//配置路由</div><div class="line">  routes: [              </div><div class="line">    &#123;                    //每一个对象代表一个路由</div><div class="line">      path: <span class="string">'/'</span>,         //链接路径</div><div class="line">      name: <span class="string">'Hello'</span>,     //路由名称，</div><div class="line">      component: Hello   //对应的组件模板</div><div class="line">    &#125;,&#123;</div><div class="line">      path:<span class="string">'/Test'</span>,</div><div class="line">      name:<span class="string">'Test'</span>,</div><div class="line">      component:Test</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>然后我们就可以在App.vue里面通过router-view来展示我们的组件内容</p><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><p>我们说router是做路径管理的，那么我们就可以通过router-link来控制组件的切换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;router-link to=<span class="string">"组件路径"</span>&gt;链接内容&lt;/router-link&gt;</div></pre></td></tr></table></figure></p><p>在这里解释一下，to：是我们的导航路径，要填写的是你在router/index.js文件里配置的path值，如果要导航到默认首页，只需要写成  to=”/” ，比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">   &lt;li&gt;&lt;router-link to=<span class="string">"/"</span>&gt;首页&lt;/router-link&gt;&lt;/li&gt;</div><div class="line">   &lt;li&gt;&lt;router-link to=<span class="string">"/Test"</span>&gt;Test页面&lt;/router-link&gt;&lt;/li&gt;   </div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;vue-router就是SPA（单页应用）的路径管理器。通俗的说，vue-router就是我们WebApp的链接路径管理系统。它跟前端的a标
      
    
    </summary>
    
      <category term="All" scheme="http://NicolasGui.github.io/categories/All/"/>
    
      <category term="vue" scheme="http://NicolasGui.github.io/categories/All/vue/"/>
    
    
      <category term="All" scheme="http://NicolasGui.github.io/tags/All/"/>
    
      <category term="vue" scheme="http://NicolasGui.github.io/tags/vue/"/>
    
      <category term="web前端" scheme="http://NicolasGui.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="路由" scheme="http://NicolasGui.github.io/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
</feed>
